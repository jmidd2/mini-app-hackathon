{"version":3,"file":"util.js","names":["_client","require","Errors","exports","PrismaErrors","Prisma","PrismaClientKnownRequestError","PrismaClientUnknownRequestError","PrismaClientRustPanicError","PrismaClientInitializationError","PrismaClientValidationError","sanitizeErrorMessage","error","message","includes","mapErrorDetails","details","isError","Error"],"sources":["../src/util.ts"],"sourcesContent":["import { Prisma } from '@prisma/client';\n\nexport enum Errors {\n  ENTITY_NOT_FOUND = 'entity not found',\n  INVALID_PAYLOAD = 'invalid payload',\n}\n\nconst PrismaErrors = [\n  Prisma.PrismaClientKnownRequestError,\n  Prisma.PrismaClientUnknownRequestError,\n  Prisma.PrismaClientRustPanicError,\n  Prisma.PrismaClientInitializationError,\n  Prisma.PrismaClientValidationError,\n];\n\n// const errorValues: string[] = Object.values(Errors);\n\n/* eslint @typescript-eslint/no-explicit-any:off */\nexport function sanitizeErrorMessage(error: any) {\n  if (typeof error.message === 'string' && PrismaErrors.includes(error)) {\n    return error.message;\n  } else {\n    return 'an unknown error has occurred';\n  }\n}\n\nexport function mapErrorDetails(details: string) {\n  return details;\n}\n\nexport function isError(error: unknown): error is Error {\n  return error instanceof Error;\n}\n"],"mappings":";;;;;;;;;AAAA,IAAAA,OAAA,GAAAC,OAAA;AAAwC,IAE5BC,MAAM,0BAANA,MAAM;EAANA,MAAM;EAANA,MAAM;EAAA,OAANA,MAAM;AAAA;AAAAC,OAAA,CAAAD,MAAA,GAAAA,MAAA;AAKlB,IAAME,YAAY,GAAG,CACnBC,cAAM,CAACC,6BAA6B,EACpCD,cAAM,CAACE,+BAA+B,EACtCF,cAAM,CAACG,0BAA0B,EACjCH,cAAM,CAACI,+BAA+B,EACtCJ,cAAM,CAACK,2BAA2B,CACnC;;AAED;;AAEA;AACO,SAASC,oBAAoBA,CAACC,KAAU,EAAE;EAC/C,IAAI,OAAOA,KAAK,CAACC,OAAO,KAAK,QAAQ,IAAIT,YAAY,CAACU,QAAQ,CAACF,KAAK,CAAC,EAAE;IACrE,OAAOA,KAAK,CAACC,OAAO;EACtB,CAAC,MAAM;IACL,OAAO,+BAA+B;EACxC;AACF;AAEO,SAASE,eAAeA,CAACC,OAAe,EAAE;EAC/C,OAAOA,OAAO;AAChB;AAEO,SAASC,OAAOA,CAACL,KAAc,EAAkB;EACtD,OAAOA,KAAK,YAAYM,KAAK;AAC/B"}